#!/usr/bin/python3
# Release: 221207.1

# Import required libraries
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('WebKit2', '4.0')
gi.require_version('Notify', '0.7')

from gi.repository import Gtk
from gi.repository import WebKit2
from gi.repository import GLib
from gi.repository import Notify
from gi.repository import Gdk
from gi.repository import Soup

import sys,os, urllib.request, json, threading

from threading import Thread

url = None
# check if url is passed from command line
if len(sys.argv) == 2:
  # read url from commandline
  url = str(sys.argv[1])


class BrowserTab():

  parent = None  

  def __init__(self, browser_window):
    self.parent = browser_window
    # add url editor
    self.url_text = Gtk.Entry()
    self.url_text.connect("activate", self.eventURLEnterKeyPressed)
    # add button goBack
    self.goback_btn = Gtk.Button()
    self.goback_btn.add(Gtk.Image.new_from_icon_name("go-previous", Gtk.IconSize.SMALL_TOOLBAR))
    self.goback_btn.connect("clicked",self.doGoBack)
    # add button goForward    
    self.goforward_btn = Gtk.Button()
    self.goforward_btn.add(Gtk.Image.new_from_icon_name("go-next", Gtk.IconSize.SMALL_TOOLBAR))
    self.goforward_btn.connect("clicked",self.doGoForward)
    # add button refresh
    self.refresh_btn = Gtk.Button()
    self.refresh_btn.add(Gtk.Image.new_from_icon_name("reload", Gtk.IconSize.SMALL_TOOLBAR))
    self.refresh_btn.connect("clicked",self.doRefresh)
    # add button go home
    self.home_btn = Gtk.Button()
    self.home_btn.add(Gtk.Image.new_from_icon_name("go-home", Gtk.IconSize.SMALL_TOOLBAR))
    self.home_btn.connect("clicked",self.doGoHome)
    # add button new tab
    self.ntab_btn = Gtk.Button()
    self.ntab_btn.add(Gtk.Image.new_from_icon_name("tab-new",Gtk.IconSize.SMALL_TOOLBAR))
    self.ntab_btn.connect("clicked",self.addTab)
    # add button tabs
    self.tabs_btn = Gtk.Button()
    self.tabs_btn.add(Gtk.Image.new_from_icon_name("window",Gtk.IconSize.SMALL_TOOLBAR))
    self.tabs_btn.connect("clicked",self.showTabs)
    # add button bookmarks
    self.bookm_btn = Gtk.Button()
    self.bookm_btn.add(Gtk.Image.new_from_icon_name("bookmarks",Gtk.IconSize.SMALL_TOOLBAR))
    self.bookm_btn.connect("clicked",self.showBookmarks)
    # add toolbar
    self.toolbar = Gtk.Box(spacing=6)
    self.toolbar.pack_start(self.goback_btn, False, True, 0)
    self.toolbar.pack_start(self.goforward_btn, False, True, 0)
    self.toolbar.pack_start(self.refresh_btn, False, True, 0)
    self.toolbar.pack_start(self.url_text, True, True, 10)
    self.toolbar.pack_start(self.home_btn, False, True, 0)
    self.toolbar.pack_start(self.ntab_btn, False, True, 0)
    self.toolbar.pack_start(self.tabs_btn, False, True, 0)
    self.toolbar.pack_start(self.bookm_btn, False, True, 0)
    # webview
    self.scroller = Gtk.ScrolledWindow()
    # cookies
    self.context = WebKit2.WebContext.get_default()
    self.secman = self.context.get_security_manager()
    self.cookies = self.context.get_cookie_manager()
    self.manager = WebKit2.UserContentManager()
    self.storage = WebKit2.CookiePersistentStorage.TEXT
    self.policy = WebKit2.CookieAcceptPolicy.ALWAYS
    self.cookies.set_accept_policy(self.policy)
    self.cookies.set_persistent_storage(self.parent.cookies_path, self.storage)
    self.web = WebKit2.WebView().new_with_user_content_manager(self.manager)
    self.web.connect("decide-policy", self.policy_decision_requested)
    self.web.connect("load-changed", self.loaded)
    self.web.connect("create", self.opentab)
    self.scroller.add(self.web)
    # vertical panel contains all
    self.vpanel = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
    self.vpanel.pack_start(self.toolbar, False, True, 0)
    self.vpanel.pack_start(self.scroller, True, True, 0)
  
  def get(self):
    return self.vpanel
  
  def doGoBack(self, button):
    self.web.go_back()

  def doGoForward(self, button):
    self.web.go_forward()

  def doRefresh(self, button):
    self.web.reload()

  def doGoHome(self, button):
    self.goto(self.parent.browser_home)

  def opentab(self, view, action):
    self.parent.remove(self.vpanel)
    self.parent.addTab(action.get_request().get_uri());

  def addTab(self,button):
    self.parent.remove(self.vpanel)
    self.parent.addTab(None)

  def showTabs(self,button):
    self.parent.showPopupMenu()

  def showBookmarks(self, button):
    htmlString = '<html><head><title>Bookmarks</title><body><i>To edit this list modify the file options.json in ~/' + self.parent.config_path+' directory</i><hr>'
    for record in self.parent.bookmarks:
      htmlString += '<p><b><a href="' + record['url'] + '">' + record['name'] + '</a></b>&nbsp;:&nbsp;<a href="' + record['url'] +'">'+ record['url']+'</a></p>'
    htmlString += '</body></html>'
    self.web.load_html(htmlString,'about:bookmarks')

  def showConfig(self):
    htmlString = '<html><head><title>Options</title><body><h3>To change this options edit the file options.json in ~/.config/sswb directory</h3><br><hr><br>'
    htmlString += '<p><b>Homepage</b>&nbsp;:&nbsp;' + self.parent.browser_home +'</p>'
    htmlString += '<p><b>Search</b>&nbsp;:&nbsp;' + self.parent.browser_search +'</p>'
    htmlString += '<p><b>Resolution</b>&nbsp;:&nbsp;' + str(self.parent.x_res) +'x'+str(self.parent.y_res) +'</p>'
    htmlString += '<p><b>Cookies</b>&nbsp;:&nbsp;' + self.parent.cookies_path + '</p>'
    htmlString += '<p><b>Mimes</b>&nbsp;:&nbsp;' + ','.join([str(mime) for mime in self.parent.mimes]) + '</p>'
    htmlString += '</body></html>'
    self.web.load_html(htmlString,'about:config')

  def eventURLEnterKeyPressed(self,textField):
    url = textField.get_text()
    self.goto(url)

  def refresh(self):
    self.web.reload()

  def goto(self, theurl):
    if theurl.startswith('about:') :
      if theurl == 'about:config':
          self.showConfig()
          return
      elif theurl == 'about:bookmarks':
          self.showBookmarks(None)
          return
      elif theurl == 'about:home':
          self.goto(self.defaultHome)
          return
      elif theurl == 'about:blank':
        htmlString = '<html><body></body></html>'
        self.web.load_html(htmlString,theurl)
      else:
        htmlString = '<html><head><title>Error</title></head><body>Unknown command</body></html>'
        self.web.load_html(htmlString,theurl)
    else:
      # check if url start with something:// else add https://
      if theurl.find("://") <= 2:
        if ' ' in theurl or not '.' in theurl:
          theurl=self.parent.browser_search.replace('%text%',theurl.replace(' ','%20'))
        else:
          theurl = "https://" + theurl
      self.web.load_uri(theurl)
  
  def getTitle(self):
    if self.web.get_title() == None or self.web.get_title() == '':
      the_url = self.web.get_uri()
      if the_url.find("://") > 2:
        the_url = the_url.split("://", 1)[1]
      the_url = the_url.split("/",1)[0]
      the_url = the_url.replace("www.","")
      return the_url
    else:
      return self.web.get_title()

  def loaded(self, view, event):
    if event == WebKit2.LoadEvent.FINISHED:
      if self.web.get_title() == None or self.web.get_title() == '':
        self.parent.set_title(self.parent.browser_title)
      else: 
        self.parent.set_title(self.web.get_title())        
      self.url_text.set_text(self.web.get_uri())
  
  def policy_decision_requested(self,view, decision, decisionType):
    if decisionType == WebKit2.PolicyDecisionType.RESPONSE:
      mime_type_str = decision.get_response().get_mime_type()
      mime_type_arr = mime_type_str.split("/")
      if mime_type_str in self.parent.mimes or mime_type_arr[0]+'/*' in self.parent.mimes or '*/' + mime_type_arr[1] in self.parent.mimes:
        return
      else: 
        current_request = decision.get_request()
        self.download_requested(view ,current_request)
    else:
      return

  def download_requested(self,view, download):
    url_arr = download.get_uri().split('/')
    name = url_arr[len(url_arr)-1]
    if len(name) < 3:
      return
    temp = name.split('.')
    ext = temp[len(temp)-1]
    baseName = name[0:0-len(ext)-1]
    nameKo = True
    counter = 0
    Notify.init(self.getTitle())
    while nameKo:
      path = os.path.join(GLib.get_user_special_dir(GLib.UserDirectory.DIRECTORY_DOWNLOAD),name)
      tpath = os.path.join(GLib.get_user_special_dir(GLib.UserDirectory.DIRECTORY_DOWNLOAD),name +'.tmp')
      if os.path.exists(path):
        name =  baseName + "." + str(counter) + "." + ext
        counter +=1 
      else:
        nameKo = False
    Thread(target=self.store_file, args=(download.get_uri(),name,tpath,path)).start()
    return False

  def store_file(self, uri, name, temp_name, final_name):
    Notify.Notification.new("Start download: " + name).show()
    urllib.request.urlretrieve(uri, temp_name)
    os.rename(temp_name,final_name)
    Notify.Notification.new("Download completed: " + name).show()

  
  
class BrowserWindow(Gtk.Window):
  config_path=".config/sswb/"
  browser_title="Stupid Simply Web Browser" 
  # set default resolution 800x600
  x_res = 800
  y_res = 600
  # set default url and title
  browser_home = "http://www.icapito.it"
  browser_search = "https://www.google.it/search?q=%text%"
  cookies_path = os.path.join(GLib.get_home_dir(),".config/sswb/cookies.txt")
  bookmarks = [{'name':'iCapito.it','url':'https://www.icapito.it'}]
  mimes = ['text/*', 'image/*', 'video/*', 'application/ogg', 'application/xml']
  tabs = [];
  active_tab_id = None;
  active_tab_obj = None;
  
  def __init__(self, destination_url):
    self.load_conf()
    Gtk.Window.__init__(self, title=self.browser_title)
    self.set_default_size(self.x_res, self.y_res)
    self.connect("delete-event", Gtk.main_quit)
    self.connect("key-press-event",self.eventKeyPressed)
    self.addTab(destination_url)
    
  def addTab(self,destination_url):
    tab = BrowserTab(self)
    self.active_tab_obj = tab;
    self.tabs.append(tab)
    self.active_tab_id = len(self.tabs)
    self.add(tab.get())
    if destination_url == None:
      destination_url=self.browser_home
    self.active_tab_obj.goto(destination_url)
    self.set_title(self.active_tab_obj.getTitle())
    self.show_all()
    
  def prevTab(self):
    if len(self.tabs) <= 1:
      return
    nextid = self.active_tab_id - 1
    if nextid > len(self.tabs) or nextid < 1:
      nextid = len(self.tabs)
    self.showTab(nextid)

  def nextTab(self):
    if len(self.tabs) <= 1:
      return
    nextid = self.active_tab_id + 1
    if nextid > len(self.tabs):
      nextid = 1
    self.showTab(nextid)
    
  def showTab(self,tabid):
    self.remove(self.active_tab_obj.get())
    self.active_tab_id = tabid
    self.active_tab_obj = self.tabs[tabid-1]
    self.add(self.active_tab_obj.get())
    self.set_title(self.active_tab_obj.getTitle())
    self.show_all()

  def loadFromMenu(self, widget,id):
    self.showTab(id)

  def showPopupMenu(self):
    menu = Gtk.Menu()
    count = 1
    for tab in self.tabs:
      elem = Gtk.MenuItem(tab.getTitle())
      elem.connect("activate",self.loadFromMenu, count)
      menu.append(elem)
      count = count + 1
    menu.show_all()
    menu.popup(None, None, None,None, 0, Gtk.get_current_event_time())

  def eventKeyPressed(self,widget,event):
    keyval = event.keyval
    keyval_name = Gdk.keyval_name(keyval)
    ctrl = (event.state & Gdk.ModifierType.CONTROL_MASK)
    if keyval_name == "F5":
      self.active_tab_obj.refresh()
      
  def load_conf(self):
    json_dir_path = os.path.join(GLib.get_home_dir(),self.config_path)
    json_file_path = os.path.join(json_dir_path,"options.json")
    if not os.path.isfile(json_file_path):
      self.save_conf()
    json_data = None
    try:
      with open(json_file_path, 'r') as config_file:
        json_data = json.load(config_file)
      if 'home' in json_data:
        self.browser_home = json_data['home']
      if 'resolution' in json_data:
        readResolution = json_data['resolution'].split("x")
        self.x_res = int(readResolution[0])
        self.y_res = int(readResolution[1])
      if 'search' in json_data:
        self.browser_search = json_data['search']
      if 'cookies' in json_data:
        self.cookies_path = json_data['cookies']
      if 'bookmarks' in json_data:
        self.bookmarks = json_data['bookmarks']
      if 'mimes' in json_data:
        self.mimes = json_data['mimes']
    except:
      return
  
  def save_conf(self):
    default_confs = {'home':self.browser_home,'resolution': str(self.x_res) +'x'+str(self.y_res), 'search': self.browser_search, 'cookies': self.cookies_path, 'mimes': self.mimes, 'bookmarks' : self.bookmarks }
    json_dir_path = os.path.join(GLib.get_home_dir(),self.config_path)
    if not os.path.exists(json_dir_path):
      os.makedirs(json_dir_path)
    json_file_path = os.path.join(json_dir_path,"options.json")
    with open(json_file_path, "w") as outfile:
      outfile.write(json.dumps(default_confs, indent=4))
    
win = BrowserWindow(url)
win.load_conf()

Gtk.main()
